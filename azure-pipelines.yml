trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'demov1'

stages:
  - stage: Build
    displayName: Build Stage
    jobs:
    - job : Build
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '20.x'
          displayName: 'Install Node.js'

        - script: |
            npm install
            npm run build
          displayName: 'npm install and build'

  - stage: Build_push_Image
    displayName: Build and push Image
    jobs:
    - job : Build_push_Image
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'cicd-acr'
            repository: 'demoazciicd.azurecr.io/$(imageName)'
            command: 'buildAndPush'
            Dockerfile: '**/Dockerfile'
            tags: |
              $(Build.BuildId)
          displayName: 'Build and Push Docker image'

  - stage: Relese_Dev
    displayName: Relese to Dev env 
    jobs:
    - deployment : Relese_Dev
      environment: Development
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Kubernetes@1
                inputs:
                  connectionType: 'Azure Resource Manager'
                  azureSubscriptionEndpoint: 'cicd-sp'
                  azureResourceGroup: 'demoRG'
                  kubernetesCluster: 'demoCIDICluster'
                  namespace: 'default'
                  command: 'apply'
                  useConfigFile: false
                  kubernetesManifest: |
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: demo-deployment 
                    spec:
                      replicas: 2
                      selector:
                        matchLabels:
                          app: demo-app
                      template:
                        metadata:
                          labels:
                            app: demo-app
                        spec:
                          containers:
                          - name: demo-app
                            image: demoazciicd.azurecr.io/$(imageName):$(Build.BuildId)
                            ports:
                            - containerPort: 80
                    ---
                    apiVersion: v1
                    kind: Service
                    metadata:
                      name: demo-app-service
                    spec:
                      type: LoadBalancer
                      ports:
                      - port: 80
                      selector:
                        app:demo-app
                  secretType: 'dockerRegistry'
                  containerRegistryType: 'Azure Container Registry'
                  azureSubscriptionEndpointForSecrets: 'cicd-sp'
                  azureResourceGroupForSecrets: 'demoRG'
                  azureContainerRegistry: 'demoazciicd'
                displayName: 'Deploy to Dev AKS'

  - stage: Relese_Prd
    dependsOn: [ Relese_Dev ]
    displayName: Relese to Prod env 
    jobs:
    - deployment : Relese_Prd
      environment: Production
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Kubernetes@1
                inputs:
                  connectionType: 'Azure Resource Manager'
                  azureSubscriptionEndpoint: 'cicd-sp'
                  azureResourceGroup: 'demoRG'
                  kubernetesCluster: 'demoCIDICluster'
                  namespace: 'default'
                  command: 'apply'
                  useConfigFile: false
                  kubernetesManifest: |
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: demo-deployment 
                    spec:
                      replicas: 2
                      selector:
                        matchLabels:
                          app: demo-app
                      template:
                        metadata:
                          labels:
                            app: demo-app
                        spec:
                          containers:
                          - name: demo-app
                            image: demoazciicd.azurecr.io/$(imageName):$(Build.BuildId)
                            ports:
                            - containerPort: 80
                    ---
                    apiVersion: v1
                    kind: Service
                    metadata:
                      name: demo-app-service
                    spec:
                      type: LoadBalancer
                      ports:
                      - port: 80
                      selector:
                        app:demo-app
                  secretType: 'dockerRegistry'
                  containerRegistryType: 'Azure Container Registry'
                  azureSubscriptionEndpointForSecrets: 'cicd-sp'
                  azureResourceGroupForSecrets: 'demoRG'
                  azureContainerRegistry: 'demoazciicd'
                displayName: 'Deploy to Dev AKS'



#az ad sp create-for-rbac --name cicd-sp --role Contributor --scopes /subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/resourceGroups/demoRG/providers/Microsoft.ContainerRegistry/registries/demoazciicd --sdk-auth
# {
#   "clientId": "6b39280e-ab03-4fb2-883a-2a4c8e0cd3cc",
#   "clientSecret": "gqZ8Q~cX3W3ThxAwHQD-NMtxCrrKeLK.2F0nkcze",
#   "subscriptionId": "30f35e9a-4e7f-4d77-81d5-777bec490223",
#   "tenantId": "29eacd1b-65d0-4a64-9946-70ac76c80524",
#   "activeDirectoryEndpointUrl": "https://login.microsoftonline.com",
#   "resourceManagerEndpointUrl": "https://management.azure.com/",
#   "activeDirectoryGraphResourceId": "https://graph.windows.net/",
#   "sqlManagementEndpointUrl": "https://management.core.windows.net:8443/",
#   "galleryEndpointUrl": "https://gallery.azure.com/",
#   "managementEndpointUrl": "https://management.core.windows.net/"
# }

# az role assignment create --assignee 169558fc-27f5-4b24-b530-4566beaf1ff0 --role "Azure Kubernetes Service Cluster User Role" --scope /subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/resourceGroups/demoRG/providers/Microsoft.ContainerService/managedClusters/demoCIDICluster
# {
#   "condition": null,
#   "conditionVersion": null,
#   "createdBy": null,
#   "createdOn": "2024-06-17T17:34:18.979361+00:00",
#   "delegatedManagedIdentityResourceId": null,
#   "description": null,
#   "id": "/subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/resourceGroups/demoRG/providers/Microsoft.ContainerService/managedClusters/demoCIDICluster/providers/Microsoft.Authorization/roleAssignments/cb1b0903-7ec3-4862-af88-23641100bd48",
#   "name": "cb1b0903-7ec3-4862-af88-23641100bd48",
#   "principalId": "169558fc-27f5-4b24-b530-4566beaf1ff0",
#   "principalType": "ServicePrincipal",
#   "resourceGroup": "demoRG",
#   "roleDefinitionId": "/subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
#   "scope": "/subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/resourceGroups/demoRG/providers/Microsoft.ContainerService/managedClusters/demoCIDICluster",
#   "type": "Microsoft.Authorization/roleAssignments",
#   "updatedBy": "1ff2e637-fad0-454b-a2b3-7a681a0ee903",
#   "updatedOn": "2024-06-17T17:34:19.929664+00:00"
# }

# az role assignment list --assignee 169558fc-27f5-4b24-b530-4566beaf1ff0 --scope /subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/resourceGroups/demoRG/providers/Microsoft.ContainerService/managedClusters/demoCIDICluster
# [
#   {
#     "condition": null,
#     "conditionVersion": null,
#     "createdBy": "1ff2e637-fad0-454b-a2b3-7a681a0ee903",
#     "createdOn": "2024-06-17T17:34:19.929664+00:00",
#     "delegatedManagedIdentityResourceId": null,
#     "description": null,
#     "id": "/subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/resourceGroups/demoRG/providers/Microsoft.ContainerService/managedClusters/demoCIDICluster/providers/Microsoft.Authorization/roleAssignments/cb1b0903-7ec3-4862-af88-23641100bd48",
#     "name": "cb1b0903-7ec3-4862-af88-23641100bd48",
#     "principalId": "169558fc-27f5-4b24-b530-4566beaf1ff0",
#     "principalName": "6b39280e-ab03-4fb2-883a-2a4c8e0cd3cc",
#     "principalType": "ServicePrincipal",
#     "resourceGroup": "demoRG",
#     "roleDefinitionId": "/subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
#     "roleDefinitionName": "Azure Kubernetes Service Cluster User Role",
#     "scope": "/subscriptions/30f35e9a-4e7f-4d77-81d5-777bec490223/resourceGroups/demoRG/providers/Microsoft.ContainerService/managedClusters/demoCIDICluster",
#     "type": "Microsoft.Authorization/roleAssignments",
#     "updatedBy": "1ff2e637-fad0-454b-a2b3-7a681a0ee903",
#     "updatedOn": "2024-06-17T17:34:19.929664+00:00"
#   }
# ]